// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// approx_fpop
List approx_fpop(Rcpp::NumericMatrix data, double penalty, std::string intersection, std::string exclusion, bool NbOfCands, bool NbOfExclus);
RcppExport SEXP _FPOPapproximation_approx_fpop(SEXP dataSEXP, SEXP penaltySEXP, SEXP intersectionSEXP, SEXP exclusionSEXP, SEXP NbOfCandsSEXP, SEXP NbOfExclusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< std::string >::type intersection(intersectionSEXP);
    Rcpp::traits::input_parameter< std::string >::type exclusion(exclusionSEXP);
    Rcpp::traits::input_parameter< bool >::type NbOfCands(NbOfCandsSEXP);
    Rcpp::traits::input_parameter< bool >::type NbOfExclus(NbOfExclusSEXP);
    rcpp_result_gen = Rcpp::wrap(approx_fpop(data, penalty, intersection, exclusion, NbOfCands, NbOfExclus));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FPOPapproximation_approx_fpop", (DL_FUNC) &_FPOPapproximation_approx_fpop, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_FPOPapproximation(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
